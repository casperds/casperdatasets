<?xml version="1.0" ?>
<project name="common" xmlns:ivy="antlib:org.apache.ivy.ant">
	<!-- load properties from build.properties file -->
	<property file="build.properties" />
		
	<!-- compiler options -->
	<property name="target" value="1.6" />
	<property name="source" value="1.6" />
	<property name="javac.debug" value="on" />
	<property name="javac.args" value="-Xlint -Xlint:-path" />

	<!-- locations NB: relative paths are relative to importer -->
	<dirname property="buildsupport.dir" file="${ant.file.common}" />
	<property name="buildresource.dir" location="buildresource" />
	<ivy:settings file="${buildresource.dir}/ivysettings.xml" />
	<property name="src.dir" location="src" />
	<property name="res.dir" value="resource" />
	<property name="build.dir" location="build" />
	<property name="dist.dir" location="${build.dir}" />
	<property name="ivy.lib.dir" location="${build.dir}/lib" />
	<property name="class.dir" location="${build.dir}/bin" />
	<property name="doc.dir" location="doc" />
	<property name="ivyreport.dir" location="${doc.dir}/dependencies" />
	<property name="ivypublish.dir" location="ivypublish" />
	<property name="published-ixy.xml" location="${dist.dir}/ivy-${version}.xml" />

	<!-- artifact names -->
	<property name="binary.jar" value="${name}-${version}.jar" />
	<property name="javadoc.jar" value="${name}-javadoc-${version}.jar" />
	<property name="sources.jar" value="${name}-sources-${version}.jar" />
	<property name="binary.plus.deps.zip" value="${name}-plus-deps-${version}.zip" />
	<property name="pom-file" value="${name}-${version}.pom" />

	<!-- build class path -->
	<path id="build.classpath">
		<!-- all jars in the lib dir -->
		<fileset dir="${ivy.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<tstamp>
		<format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss" />
	</tstamp>

	<target name="resolve" description="Resolve dependencies using Ivy">
		
		<!-- empty ivy.lib.dir -->
		<delete includeemptydirs="true">
		    <fileset dir="${ivy.lib.dir}" includes="**/*"/>
		</delete>

		<!-- do a retrieve to ivy.lib.dir -->
		<ivy:retrieve conf="default" />

		<!-- save report to doc.dir -->
		<ivy:report conf="default" graph="false" todir="${ivyreport.dir}" />

	</target>
	
	<target name="post-resolve" depends="resolve" description="Post Ivy resolve" />
	
	<target name="clean-ivycache" description="Clean the Ivy cache">
		<ivy:cleancache />
	</target>

	<target name="init" depends="clean" description="Create compilation dirs">
		<mkdir dir="${class.dir}" />
		<mkdir dir="${ivypublish.dir}" />
		<copy includeemptydirs="false" failonerror="false" todir="${class.dir}">
			<fileset dir="${src.dir}">
				<exclude name="**/*.launch" />
				<exclude name="**/*.java" />
			</fileset>
			<!-- replace @VERSION@ token with version number -->
			<filterset>
				<filter token="VERSION" value="${version}"/>
			</filterset>
		</copy>
		<!-- place resources in root dir of jar so they'll be on the classpath -->
		<copy includeemptydirs="false" flatten="true" todir="${class.dir}">
			<fileset dir="." includes="${res.dir}/" />
		</copy>
	</target>

	<target name="clean" description="Remove build dir">
		<delete dir="${build.dir}" />
	</target>

	<target name="compile" depends="init,resolve,post-resolve" description="Compile source">
		<javac srcdir="${src.dir}" debug="${javac.debug}" destdir="${class.dir}" includeantruntime="false" source="${source}" target="${target}" classpathref="build.classpath">
			<compilerarg line="${javac.args}" />
		</javac>
	</target>

	<target name="javadoc" description="Generate javadocs">
		<javadoc-with-presets sourcepath="${src.dir}" destdir="${doc.dir}" author="true" version="true" use="true" classpathref="build.classpath" />
	</target>

	<target name="package" depends="compile, javadoc" description="package: Compile and build JARs for binaries, source and javadocs">
		<mkdir dir="${dist.dir}" />
		<property name="manifest" location="${dist.dir}/MANIFEST.MF" />
		
		<antcall target="pre-package" />

		<manifestclasspath property="jar.classpath"
				jarfile="${dist.dir}/${binary.jar}">
			<classpath refid="build.classpath" />
		</manifestclasspath>

		<manifest-with-presets file="${manifest}" mode="update">
			<attribute name="Built-By" value="${user.name}"/>
			<attribute name="Implementation-Version" value="${version}"/>
			<attribute name="Built-Date" value="${TODAY}"/>
			<attribute name="Class-Path" value="${jar.classpath}" />
		</manifest-with-presets>
	
		<jar destfile="${dist.dir}/${binary.jar}" basedir="${class.dir}"
			manifest="${manifest}" />
		<jar destfile="${dist.dir}/${javadoc.jar}" basedir="${doc.dir}" />
		<jar destfile="${dist.dir}/${sources.jar}" basedir="${src.dir}" />
		<zip destfile="${dist.dir}/${binary.plus.deps.zip}" basedir="${dist.dir}">
			<include name="${binary.jar}" />
			<zipfileset dir="${ivy.lib.dir}" prefix="lib" />
		</zip>
		
		<delete file="${manifest}" />
		
		<antcall target="post-package" />
 
	</target>

	<target name="make-pom" description="Create Maven POM file based on ivy.xml">
		<ivy:makepom ivyfile="ivy.xml" pomfile="${dist.dir}/${pom-file}" conf="*">
		    <!--
		      Mapping confs to scopes is important, otherwise
		      unmapped confs are included as optional. This makes
		      the confs specified below non-optional.
		    -->
		    <mapping conf="compile" scope="compile"/>
			<mapping conf="provided" scope="provided"/>
			<mapping conf="runtime" scope="runtime"/>
			<mapping conf="test" scope="test"/>
			<mapping conf="system" scope="system"/>
		</ivy:makepom>
	</target>

	<target name="publish" depends="make-pom" description="Publish artifacts to local ivy repository">
		<!-- do a resolve first. this places our ivy.xml in the cache -->
		<ivy:resolve />
		<!-- delete the resolved/delivered ivy.xml file from previous publications
			 in case we have made new changes to ivy.xml since then  
        	 this will be regenerated in the deliver performed by the publish -->
		<delete file="${published-ixy.xml}" />
		<ivy:publish artifactspattern="${dist.dir}/[artifact](-[classifier])-${version}.[ext]" status="release" overwrite="true" resolver="local" />

		<!-- place published ivy.xml in ivypublish.dir. this file can be made
		     available via SVN/http for ivy URL resolvers to fetch -->
		<delete includeemptydirs="true">
		    <fileset dir="${ivypublish.dir}" includes="**/*"/>
		</delete>
		<copy file="${published-ixy.xml}" todir="${ivypublish.dir}" overwrite="true"/>
	</target>

	<target name="publish-local-maven-repo" depends="make-pom" description="Publish artifacts to local maven repo directory">
		<!-- do a resolve first to get organisation property and other details from ivy.xml -->
		<ivy:resolve />
		<ivy:publish resolver="local-maven-repo" forcedeliver="true" overwrite="true" publishivy="false">
			<artifacts pattern="${dist.dir}/[artifact](-[classifier])-${version}.[ext]"/>
		</ivy:publish>
	</target>	
	
	<taskdef name="gcupload" classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask" classpath="${buildsupport.dir}/ant-googlecode-0.0.2.jar" />
	<target name="gcupload" description="Upload JARs to googlecode">
		<property file="${buildsupport.dir}/build.credentials.properties" />
		 
		<gcupload username="${gc.username}" password="${gc.password}" projectname="${gc.project}" filename="${dist.dir}/${binary.jar}" targetfilename="${binary.jar}" summary="${name} ${version} binary" labels="Featured" />
		<gcupload username="${gc.username}" password="${gc.password}" projectname="${gc.project}" filename="${dist.dir}/${javadoc.jar}" targetfilename="${javadoc.jar}" summary="${name} ${version} javadoc" labels="Type-Docs" />
		<gcupload username="${gc.username}" password="${gc.password}" projectname="${gc.project}" filename="${dist.dir}/${sources.jar}" targetfilename="${sources.jar}" summary="${name} ${version} sources" labels="Type-Source" />
		<gcupload username="${gc.username}" password="${gc.password}" projectname="${gc.project}" filename="${dist.dir}/${binary.plus.deps.zip}" targetfilename="${binary.plus.deps.zip}" summary="${name} ${version} binary + dependencies" labels="Featured" />
	</target>

</project>
